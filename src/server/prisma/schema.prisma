generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model complains {
  complain_id             String               @id @db.VarChar(5)
  username                String               @db.VarChar(5)
  classroom_facilities_id String               @db.VarChar(5)
  description             String               @db.Text
  created_at              DateTime             @default(now()) @db.DateTime(0)
  status                  complains_status     @default(unresolved)
  users                   users                @relation(fields: [username], references: [username], onUpdate: Restrict, map: "complains_ibfk_1")
  room_facilities         classroom_facilities @relation(fields: [classroom_facilities_id], references: [classroom_facilities_id], onUpdate: Restrict, map: "complains_ibfk_2")

  @@index([classroom_facilities_id], map: "classroom_facilities_id")
  @@index([username], map: "username")
}

model facilities {
  facility_id          String                 @id @db.VarChar(5)
  facility_name        String                 @db.VarChar(100)
  facility_description String                 @db.Text
  facility_qty         Int
  room_id              String                 @db.VarChar(5)
  classroom_facilities classroom_facilities[]
  rooms                rooms                  @relation(fields: [room_id], references: [room_id], onUpdate: Restrict, map: "facilities_ibfk_1")

  @@index([room_id], map: "room_id")
}

model reservations {
  reservation_id String              @id @db.VarChar(5)
  username       String              @db.VarChar(255)
  room_id        String              @db.VarChar(5)
  start_time     DateTime            @db.DateTime(0)
  end_time       DateTime            @db.DateTime(0)
  purpose        String              @db.VarChar(255)
  status         reservations_status @default(pending)
  user           users               @relation("UserReservations", fields: [username], references: [username], onUpdate: Restrict, map: "reservations_username_fkey")
  room           rooms               @relation(fields: [room_id], references: [room_id], onUpdate: Restrict, map: "reservations_room_id_fkey")

  @@index([room_id], map: "room_id")
  @@index([username], map: "username")
}

model users {
  username     String         @id @db.VarChar(255)
  password     String         @db.VarChar(255)
  name         String         @db.VarChar(255)
  role_id      String         @db.Char(1)
  status       String         @default("1") @db.Char(1)
  room_id      String         @db.VarChar(5)
  complains    complains[]
  reservations reservations[] @relation("UserReservations")
  roles        roles          @relation(fields: [role_id], references: [role_id], onUpdate: Restrict, map: "users_ibfk_1")
  rooms        rooms          @relation(fields: [room_id], references: [room_id], onUpdate: Restrict, map: "users_ibfk_2")

  @@index([role_id], map: "role_id")
  @@index([room_id], map: "room_id")
}

model roles {
  role_id   String  @id @db.Char(1)
  role_name String  @db.VarChar(255)
  users     users[]
}

model rooms {
  room_id              String                 @id @db.VarChar(5)
  room_name            String                 @db.VarChar(15)
  room_capacity        Int
  room_status          String                 @default("available") @db.VarChar(255)
  classroom_facilities classroom_facilities[]
  facilities           facilities[]
  reservations         reservations[]
  users                users[]
}

model classroom_facilities {
  classroom_facilities_id String      @id @db.VarChar(5)
  room_id                 String      @db.VarChar(5)
  facility_id             String      @db.VarChar(5)
  qty                     Int
  condition               String      @db.VarChar(255)
  rooms                   rooms       @relation(fields: [room_id], references: [room_id], onUpdate: Restrict, map: "classroom_facilities_ibfk_1")
  facilities              facilities  @relation(fields: [facility_id], references: [facility_id], onUpdate: Restrict, map: "classroom_facilities_ibfk_2")
  complains               complains[]

  @@index([facility_id], map: "facility_id")
  @@index([room_id], map: "room_id")
}

enum complains_status {
  resolved
  still_resolving @map("still resolving")
  unresolved
}

enum reservations_status {
  pending
  approved
  rejected
  cancelled
}
