generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model complains {
  complain_id             String           @id @db.VarChar(5)
  username                String           @db.VarChar(5)
  classroom_facilities_id String           @db.VarChar(5)
  complaint               String           @db.Text
  description             String           @db.Text
  created_at              DateTime         @default(now())
  status                  complains_status @default(unresolved)
  lampiran                String           @db.VarChar(255)
  room_facilities         room_facilities  @relation(fields: [classroom_facilities_id], references: [room_facilities_id])
  users                   users            @relation(fields: [username], references: [username])

  @@index([classroom_facilities_id], map: "complains_classroom_facilities_id_fkey")
  @@index([username], map: "complains_username_fkey")
}

model facilities {
  facility_id          String            @id @db.VarChar(5)
  facility_name        String            @db.VarChar(100)
  facility_description String            @db.Text
  facility_qty         Int
  room_id              String            @db.VarChar(5)
  rooms                rooms             @relation(fields: [room_id], references: [room_id])
  room_facilities      room_facilities[]

  @@index([room_id], map: "facilities_room_id_fkey")
}

model reservations {
  reservation_id               String              @id @db.VarChar(5)
  username                     String              @db.VarChar(255)
  room_id                      String              @db.VarChar(5)
  start_time                   DateTime
  end_time                     DateTime
  purpose                      String              @db.VarChar(255)
  status                       reservations_status @default(pending)
  is_need_accompanying_teacher Boolean
  rooms                        rooms               @relation(fields: [room_id], references: [room_id])
  users                        users               @relation(fields: [username], references: [username])

  @@index([room_id], map: "reservations_room_id_fkey")
  @@index([username], map: "reservations_username_fkey")
}

model roles {
  role_id   String  @id @db.Char(1)
  role_name String
  users     users[]
}

model room_facilities {
  room_facilities_id String      @id @db.VarChar(5)
  room_id            String      @db.VarChar(5)
  facility_id        String      @db.VarChar(5)
  qty                Int
  condition          String
  complains          complains[]
  facilities         facilities  @relation(fields: [facility_id], references: [facility_id], map: "classroom_facilities_facility_id_fkey")
  rooms              rooms       @relation(fields: [room_id], references: [room_id], map: "classroom_facilities_room_id_fkey")

  @@index([facility_id], map: "classroom_facilities_facility_id_fkey")
  @@index([room_id], map: "classroom_facilities_room_id_fkey")
}

model rooms {
  room_id         String            @id @db.VarChar(5)
  room_name       String            @db.VarChar(11)
  room_capacity   Int
  room_status     String            @default("available")
  facilities      facilities[]
  reservations    reservations[]
  room_facilities room_facilities[]
  students        students[]
}

model settings {
  id                Int      @id @default(autoincrement()) @db.TinyInt
  day               String   @db.VarChar(10)
  booking_start     DateTime @db.Time(0)
  booking_end       DateTime @db.Time(0)
  reservation_start DateTime @db.Time(0)
  conditional_time  DateTime @db.Time(0)
  reservation_end   DateTime @db.Time(0)
  active            Boolean  @default(true)
}

model students {
  student_id  Int    @id @default(autoincrement())
  username    String @db.VarChar(5)
  room_id     String @db.VarChar(5)
  school_year Int    @db.Year
  rooms       rooms  @relation(fields: [room_id], references: [room_id], onUpdate: Restrict, map: "fk_student_room")
  users       users  @relation(fields: [username], references: [username], onUpdate: Restrict, map: "fk_student_user")

  @@index([room_id], map: "fk_student_room")
  @@index([username], map: "fk_student_user")
}

model users {
  username     String         @id @db.VarChar(255)
  password     String
  name         String
  role_id      String         @db.Char(1)
  status       String         @default("1") @db.Char(1)
  complains    complains[]
  reservations reservations[]
  students     students[]
  roles        roles          @relation(fields: [role_id], references: [role_id])

  @@index([role_id], map: "users_role_id_fkey")
}

enum complains_status {
  resolved
  still_resolving @map("still resolving")
  unresolved
}

enum reservations_status {
  pending
  approved
  rejected
  cancelled
}
