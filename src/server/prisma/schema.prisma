generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model complains {
  complain_id             String           @id @db.VarChar(255)
  username                String           @db.VarChar(255)
  classroom_facilities_id String           @db.VarChar(255)
  complaint               String           @db.Text
  description             String           @db.Text
  created_at              DateTime         @default(now())
  status                  complains_status @default(unresolved)
  lampiran                String           @db.VarChar(255)
  room_facilities         room_facilities  @relation(fields: [classroom_facilities_id], references: [room_facilities_id])
  users                   users            @relation(fields: [username], references: [username])

  @@index([classroom_facilities_id], map: "complains_classroom_facilities_id_fkey")
  @@index([username], map: "complains_username_fkey")
}

model facilities {
  facility_id          String            @id @db.VarChar(255)
  facility_name        String            @db.VarChar(100)
  facility_description String            @db.Text
  facility_qty         Int
  room_id              String            @db.VarChar(255)
  rooms                rooms             @relation(fields: [room_id], references: [room_id])
  room_facilities      room_facilities[]

  @@index([room_id], map: "facilities_room_id_fkey")
}

model reservations {
  reservation_id                                     String                      @id @db.VarChar(255)
  username                                           String                      @db.VarChar(255)
  room_id                                            String                      @db.VarChar(255)
  start_time                                         DateTime
  end_time                                           DateTime
  purpose                                            String                      @db.VarChar(255)
  status_sarpras                                     reservations_status_sarpras @default(pending)
  teacher_assistant                                  String?                     @db.VarChar(255)
  status_guru                                        reservations_status_guru?
  description                                        String?                     @db.Text
  prev                                               String?                     @db.VarChar(255)
  next                                               String?                     @db.VarChar(255)
  reservations_reservations_nextToreservations       reservations?               @relation("reservations_nextToreservations", fields: [next], references: [reservation_id], map: "next_fkey")
  other_reservations_reservations_nextToreservations reservations[]              @relation("reservations_nextToreservations")
  reservations_reservations_prevToreservations       reservations?               @relation("reservations_prevToreservations", fields: [prev], references: [reservation_id], map: "prev_fkey")
  other_reservations_reservations_prevToreservations reservations[]              @relation("reservations_prevToreservations")
  rooms                                              rooms                       @relation(fields: [room_id], references: [room_id], onDelete: NoAction)
  users_reservations_teacher_assistantTousers        users?                      @relation("reservations_teacher_assistantTousers", fields: [teacher_assistant], references: [username], onDelete: NoAction, map: "reservations_teacher_fkey")
  users                                              users                       @relation(fields: [username], references: [username], onDelete: NoAction)

  @@index([room_id], map: "reservations_room_id_fkey")
  @@index([username], map: "reservations_username_fkey")
  @@index([next], map: "next_fkey")
  @@index([prev], map: "prev_fkey")
  @@index([teacher_assistant], map: "reservations_teacher_fkey")
}

model roles {
  role_id   String  @id @db.Char(1)
  role_name String
  users     users[]
}

model room_facilities {
  room_facilities_id String      @id @db.VarChar(255)
  room_id            String      @db.VarChar(255)
  facility_id        String      @db.VarChar(255)
  qty                Int
  condition          String
  complains          complains[]
  facilities         facilities  @relation(fields: [facility_id], references: [facility_id], map: "classroom_facilities_facility_id_fkey")
  rooms              rooms       @relation(fields: [room_id], references: [room_id], map: "classroom_facilities_room_id_fkey")

  @@index([facility_id], map: "classroom_facilities_facility_id_fkey")
  @@index([room_id], map: "classroom_facilities_room_id_fkey")
}

model rooms {
  room_id         String            @id @db.VarChar(255)
  room_name       String            @db.VarChar(11)
  room_capacity   Int
  room_category   String            @db.VarChar(255)
  room_status     String            @default("available")
  is_class        Boolean
  facilities      facilities[]
  reservations    reservations[]
  room_facilities room_facilities[]
  room_categories room_categories   @relation(fields: [room_category], references: [room_category], onDelete: Cascade, map: "fk_room_categories")
  users           users[]

  @@index([room_category], map: "fk_room_categories")
}

model settings {
  id                   Int      @id @default(autoincrement()) @db.TinyInt
  day                  String   @db.VarChar(10)
  booking              Boolean  @default(true)
  booking_start        DateTime @db.Time(0)
  booking_end          DateTime @db.Time(0)
  active               Boolean  @default(true)
  reservation_start    DateTime @db.Time(0)
  reservation_end      DateTime @db.Time(0)
  conditional_time     DateTime @db.Time(0)
  accompanying_teacher Boolean  @default(true)
}

model users {
  username                                           String         @id @db.VarChar(255)
  password                                           String
  name                                               String
  role_id                                            String         @db.Char(1)
  status                                             String         @default("1") @db.Char(1)
  kelas                                              String?        @db.VarChar(255)
  no_absen                                           Int?
  complains                                          complains[]
  reservations_reservations_teacher_assistantTousers reservations[] @relation("reservations_teacher_assistantTousers")
  reservations                                       reservations[]
  roles                                              roles          @relation(fields: [role_id], references: [role_id])
  rooms                                              rooms?         @relation(fields: [kelas], references: [room_id], onDelete: Restrict, onUpdate: Restrict, map: "users_rooms")

  @@index([role_id], map: "users_role_id_fkey")
  @@index([kelas], map: "users_rooms")
}

model room_categories {
  room_category String  @id @db.VarChar(255)
  rooms         rooms[]
}

// In your schema.prisma file
enum RoomCategory {
  // Your existing values
  lainnya // Add this line if you want to allow this value
}

enum complains_status {
  resolved
  still_resolving @map("still resolving")
  unresolved
}

enum reservations_status_sarpras {
  pending
  approved
  rejected
  cancelled
}

enum reservations_status_guru {
  pending
  rejected
  approved
  EMPTY_ENUM_VALUE @map("")
}
